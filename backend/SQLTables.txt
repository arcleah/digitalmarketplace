DROP DATABASE IF EXISTS resellStore;
CREATE DATABASE resellStore;

USE resellStore;

CREATE TABLE member (
  id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
  fname VARCHAR(50),
  lname VARCHAR(50),
  address TEXT,
  email VARCHAR(100) UNIQUE,
  password VARCHAR(100),
  phone VARCHAR(15),
  role ENUM('buyer', 'seller', 'middleman')
);

CREATE TABLE items (
  item_id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
  item_name VARCHAR(50),
  item_condition VARCHAR(50),
  size VARCHAR(20),
  description VARCHAR(500),
  price DECIMAL(10, 2),
  item_photo VARCHAR(255),
  member_id INT,
  FOREIGN KEY (member_id) REFERENCES member(id)
);

CREATE TABLE orders (
    order_id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
    cost DECIMAL(10, 2),
    order_status VARCHAR(30),
    member_id INT,
    items_id INT,
    funds_released BOOLEAN DEFAULT FALSE,
    archived BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (member_id) REFERENCES member(id),
    FOREIGN KEY (items_id) REFERENCES items(item_id)
);

CREATE TABLE order_items (
  order_item_id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
  order_id INT,
  item_id INT,
  FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (item_id) REFERENCES items(item_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE payment (
  payment_id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
  payment_name VARCHAR(30)
);

CREATE TABLE transaction (
  transaction_id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
  transaction_status VARCHAR(50) NOT NULL,
  transaction_date DATE,
  total_cost DECIMAL(10, 2) NOT NULL,
  order_id INT NOT NULL,
  member_id INT NOT NULL,
  payment_id INT,
  FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (member_id) REFERENCES member(id) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (payment_id) REFERENCES payment(payment_id) ON DELETE SET NULL ON UPDATE CASCADE
);
